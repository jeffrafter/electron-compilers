'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _btoa = require('btoa');

var _btoa2 = _interopRequireDefault(_btoa);

var _compilerBase = require('../compiler-base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const inputMimeTypes = ['text/coffeescript'];
let coffee = null;

/**
 * @access private
 */
class CoffeeScriptCompiler extends _compilerBase.SimpleCompilerBase {
  constructor() {
    super();
    this.compilerOptions.sourceMap = true;
  }

  static getInputMimeTypes() {
    return inputMimeTypes;
  }

  compileSync(sourceCode, filePath) {
    coffee = coffee || require('coffee-script');

    var _coffee$compile = coffee.compile(sourceCode, Object.assign({ filename: filePath }, this.compilerOptions));

    let js = _coffee$compile.js,
        v3SourceMap = _coffee$compile.v3SourceMap;


    js = `${js}\n` + `//# sourceMappingURL=data:application/json;base64,${(0, _btoa2.default)(unescape(encodeURIComponent(v3SourceMap)))}\n` + `//# sourceURL=${this.convertFilePath(filePath)}`;

    return {
      code: js,
      mimeType: 'application/javascript'
    };
  }

  convertFilePath(filePath) {
    if (process.platform === 'win32') {
      filePath = `/${_path2.default.resolve(filePath).replace(/\\/g, '/')}`;
    }

    return encodeURI(filePath);
  }

  getCompilerVersion() {
    return require('coffee-script/package.json').version;
  }
}
exports.default = CoffeeScriptCompiler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy9jb2ZmZWVzY3JpcHQuanMiXSwibmFtZXMiOlsiaW5wdXRNaW1lVHlwZXMiLCJjb2ZmZWUiLCJDb2ZmZWVTY3JpcHRDb21waWxlciIsIlNpbXBsZUNvbXBpbGVyQmFzZSIsImNvbnN0cnVjdG9yIiwiY29tcGlsZXJPcHRpb25zIiwic291cmNlTWFwIiwiZ2V0SW5wdXRNaW1lVHlwZXMiLCJjb21waWxlU3luYyIsInNvdXJjZUNvZGUiLCJmaWxlUGF0aCIsInJlcXVpcmUiLCJjb21waWxlIiwiT2JqZWN0IiwiYXNzaWduIiwiZmlsZW5hbWUiLCJqcyIsInYzU291cmNlTWFwIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjb252ZXJ0RmlsZVBhdGgiLCJjb2RlIiwibWltZVR5cGUiLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJwYXRoIiwicmVzb2x2ZSIsInJlcGxhY2UiLCJlbmNvZGVVUkkiLCJnZXRDb21waWxlclZlcnNpb24iLCJ2ZXJzaW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxpQkFBaUIsQ0FBQyxtQkFBRCxDQUF2QjtBQUNBLElBQUlDLFNBQVMsSUFBYjs7QUFFQTs7O0FBR2UsTUFBTUMsb0JBQU4sU0FBbUNDLGdDQUFuQyxDQUFzRDtBQUNuRUMsZ0JBQWM7QUFDWjtBQUNBLFNBQUtDLGVBQUwsQ0FBcUJDLFNBQXJCLEdBQWlDLElBQWpDO0FBQ0Q7O0FBRUQsU0FBT0MsaUJBQVAsR0FBMkI7QUFDekIsV0FBT1AsY0FBUDtBQUNEOztBQUVEUSxjQUFZQyxVQUFaLEVBQXdCQyxRQUF4QixFQUFrQztBQUNoQ1QsYUFBU0EsVUFBVVUsUUFBUSxlQUFSLENBQW5COztBQURnQywwQkFHUlYsT0FBT1csT0FBUCxDQUN0QkgsVUFEc0IsRUFFdEJJLE9BQU9DLE1BQVAsQ0FBYyxFQUFFQyxVQUFVTCxRQUFaLEVBQWQsRUFBc0MsS0FBS0wsZUFBM0MsQ0FGc0IsQ0FIUTs7QUFBQSxRQUczQlcsRUFIMkIsbUJBRzNCQSxFQUgyQjtBQUFBLFFBR3ZCQyxXQUh1QixtQkFHdkJBLFdBSHVCOzs7QUFPaENELFNBQU0sR0FBRUEsRUFBRyxJQUFOLEdBQ0YscURBQW9ELG9CQUFLRSxTQUFTQyxtQkFBbUJGLFdBQW5CLENBQVQsQ0FBTCxDQUFnRCxJQURsRyxHQUVGLGlCQUFnQixLQUFLRyxlQUFMLENBQXFCVixRQUFyQixDQUErQixFQUZsRDs7QUFJQSxXQUFPO0FBQ0xXLFlBQU1MLEVBREQ7QUFFTE0sZ0JBQVU7QUFGTCxLQUFQO0FBSUQ7O0FBRURGLGtCQUFnQlYsUUFBaEIsRUFBMEI7QUFDeEIsUUFBSWEsUUFBUUMsUUFBUixLQUFxQixPQUF6QixFQUFrQztBQUNoQ2QsaUJBQVksSUFBR2UsZUFBS0MsT0FBTCxDQUFhaEIsUUFBYixFQUF1QmlCLE9BQXZCLENBQStCLEtBQS9CLEVBQXNDLEdBQXRDLENBQTJDLEVBQTFEO0FBQ0Q7O0FBRUQsV0FBT0MsVUFBVWxCLFFBQVYsQ0FBUDtBQUNEOztBQUVEbUIsdUJBQXFCO0FBQ25CLFdBQU9sQixRQUFRLDRCQUFSLEVBQXNDbUIsT0FBN0M7QUFDRDtBQXJDa0U7a0JBQWhENUIsb0IiLCJmaWxlIjoiY29mZmVlc2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgYnRvYSBmcm9tICdidG9hJztcbmltcG9ydCB7U2ltcGxlQ29tcGlsZXJCYXNlfSBmcm9tICcuLi9jb21waWxlci1iYXNlJztcblxuY29uc3QgaW5wdXRNaW1lVHlwZXMgPSBbJ3RleHQvY29mZmVlc2NyaXB0J107XG5sZXQgY29mZmVlID0gbnVsbDtcblxuLyoqXG4gKiBAYWNjZXNzIHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29mZmVlU2NyaXB0Q29tcGlsZXIgZXh0ZW5kcyBTaW1wbGVDb21waWxlckJhc2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY29tcGlsZXJPcHRpb25zLnNvdXJjZU1hcCA9IHRydWU7XG4gIH1cblxuICBzdGF0aWMgZ2V0SW5wdXRNaW1lVHlwZXMoKSB7XG4gICAgcmV0dXJuIGlucHV0TWltZVR5cGVzO1xuICB9XG5cbiAgY29tcGlsZVN5bmMoc291cmNlQ29kZSwgZmlsZVBhdGgpIHtcbiAgICBjb2ZmZWUgPSBjb2ZmZWUgfHwgcmVxdWlyZSgnY29mZmVlLXNjcmlwdCcpO1xuXG4gICAgbGV0IHtqcywgdjNTb3VyY2VNYXB9ID0gY29mZmVlLmNvbXBpbGUoXG4gICAgICBzb3VyY2VDb2RlLFxuICAgICAgT2JqZWN0LmFzc2lnbih7IGZpbGVuYW1lOiBmaWxlUGF0aCB9LCB0aGlzLmNvbXBpbGVyT3B0aW9ucykpO1xuXG4gICAganMgPSBgJHtqc31cXG5gICtcbiAgICAgIGAvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCR7YnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodjNTb3VyY2VNYXApKSl9XFxuYCArXG4gICAgICBgLy8jIHNvdXJjZVVSTD0ke3RoaXMuY29udmVydEZpbGVQYXRoKGZpbGVQYXRoKX1gO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvZGU6IGpzLFxuICAgICAgbWltZVR5cGU6ICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0J1xuICAgIH07XG4gIH1cblxuICBjb252ZXJ0RmlsZVBhdGgoZmlsZVBhdGgpIHtcbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgZmlsZVBhdGggPSBgLyR7cGF0aC5yZXNvbHZlKGZpbGVQYXRoKS5yZXBsYWNlKC9cXFxcL2csICcvJyl9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5jb2RlVVJJKGZpbGVQYXRoKTtcbiAgfVxuXG4gIGdldENvbXBpbGVyVmVyc2lvbigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnY29mZmVlLXNjcmlwdC9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuICB9XG59XG4iXX0=